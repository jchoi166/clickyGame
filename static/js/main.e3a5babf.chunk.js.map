{"version":3,"sources":["components/header/header.js","components/header/index.js","components/card/card.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["styles","div","lineHeight","backgroundColor","fontSize","display","justifyContent","boxShadow","zIndex","p","margin","textAlign","Header","props","react_default","a","createElement","style","message","currentScore","topScore","height","width","img","position","borderStyle","borderColor","borderWidth","Card","name","alt","src","image","onClick","onPress","Wrapper","className","children","App","state","cards","office","cardSelections","randomizeArray","currentArray","_this","sort","b","Math","random","setState","array","guessClick","event","console","log","target","selectionCopy","slice","tempScore","length","push","i","scoreCounter","_this2","this","Fragment","components_header","components_Wrapper_Wrapper","map","worker","index","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3a5babf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst styles = {\r\n     div: {\r\n        lineHeight: '100px',\r\n        backgroundColor: 'lightblue',\r\n        fontSize: '30px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        boxShadow: '0px 10px 15px grey',\r\n        zIndex: '1'\r\n    },\r\n    p: {\r\n        margin: '0px 20px 0px 20px',\r\n        textAlign: 'center'\r\n    },\r\n}\r\n\r\n\r\nconst Header = props => (\r\n    <div style = {styles.div}>\r\n        <div style= {styles.p}>Clicky Game</div>\r\n        <div style= {styles.p}>{props.message}</div>\r\n        <div style= {styles.p}>Current Score: {props.currentScore}| Top Score: {props.topScore}</div>\r\n    </div>\r\n\r\n)\r\n\r\n\r\nexport default Header","import Header from './header'\r\nexport default Header","import React from 'react'\r\n\r\n\r\nconst style ={\r\n    div: {\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        width: \"300px\",\r\n        justifyContent: \"center\"\r\n    },\r\n    img: {\r\n        height: \"200px\",\r\n        width: \"200px\",\r\n        position: 'relative',\r\n        margin: '20px',\r\n        borderStyle: 'solid',\r\n        borderColor: 'white',\r\n        borderWidth: '7px'\r\n    }\r\n}\r\n   \r\nconst Card = props => (\r\n    \r\n\r\n        <div style={style.div} >\r\n            <img style={style.img} name= {props.name} alt={props.name} src={props.image} onClick={props.onPress}/>\r\n        </div>\r\n    \r\n)\r\n\r\nexport default Card","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, {\n  Component\n} from 'react';\nimport Header from './components/header'\n// import './App.css'\nimport office from './office.json'\nimport Card from './components/card'\nimport Wrapper from \"./components/Wrapper\"\n\n\nclass App extends Component {\n\n  state = {\n    cards: office,\n    cardSelections: [],\n    currentScore: 0,\n    topScore: 0,\n    message: 'Welcome to THE CLICKY GAME'\n  }\n\n  randomizeArray = () => {\n    let currentArray = this.state.cards\n    currentArray.sort(function (a, b) {\n      return 0.5 - Math.random()\n    })\n    this.setState({\n      array: currentArray\n    })\n  }\n\n  guessClick = (event) => {\n    console.log('hello')\n    console.log(event.target.name)\n    let selectionCopy = this.state.cardSelections.slice()\n    let tempScore = this.state.currentScore\n\n    tempScore = tempScore + 1 \n    this.setState({\n      currentScore: tempScore\n    })\n    \n\n    if (selectionCopy.length < 1) {\n      console.log('counter ran')\n      selectionCopy.push(event.target.name)\n      this.setState({\n        message: \"You Guessed Correctly!\"\n      })\n     \n    } else {\n      for (var i = 0; i < this.state.cardSelections.length; i++) {\n        if (this.state.cardSelections[i] === event.target.name) {\n          console.log(\"Already guessed: \", event.target.name)\n          this.setState({\n            message: \"You Lose! Try Again\",\n            cardSelections: [],\n            currentScore: 0\n          })\n          selectionCopy = []\n          break\n        } else {\n          selectionCopy.push(event.target.name)\n          this.scoreCounter()\n        }\n      }\n    }\n    \n    \n    this.setState({\n      cardSelections: selectionCopy\n    })\n    console.log(this.state.cardSelections)\n    this.randomizeArray()\n    this.scoreCounter()\n  }\n\n  scoreCounter = () => {\n    if (this.state.currentScore >= this.state.topScore) {\n      this.setState({\n        topScore: this.state.currentScore \n      })\n    }\n  }\n\n  render() {\n    return ( \n    <>\n      <Header message={this.state.message} currentScore={this.state.currentScore} topScore={ this.state.topScore }/> \n      <Wrapper> \n        {this.state.cards.map((worker, index) => ( \n          <Card \n            onPress={this.guessClick} \n            key={index} \n            name={worker.name}\n            image={worker.image}/>\n        ))} \n      </Wrapper>  \n    </>  \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}